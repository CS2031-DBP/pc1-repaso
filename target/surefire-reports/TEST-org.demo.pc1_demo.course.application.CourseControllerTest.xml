<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="org.demo.pc1_demo.course.application.CourseControllerTest" time="1.1" tests="7" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="22"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/mateonoel/Desktop/pc1-repaso/target/test-classes:/Users/mateonoel/Desktop/pc1-repaso/target/classes:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.5/spring-boot-starter-data-jpa-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.5/spring-boot-starter-aop-3.2.5.jar:/Users/mateonoel/.m2/repository/org/aspectj/aspectjweaver/1.9.22/aspectjweaver-1.9.22.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.5/spring-boot-starter-jdbc-3.2.5.jar:/Users/mateonoel/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-jdbc/6.1.6/spring-jdbc-6.1.6.jar:/Users/mateonoel/.m2/repository/org/hibernate/orm/hibernate-core/6.4.4.Final/hibernate-core-6.4.4.Final.jar:/Users/mateonoel/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/mateonoel/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/mateonoel/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/mateonoel/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/mateonoel/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/mateonoel/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/mateonoel/.m2/repository/net/bytebuddy/byte-buddy/1.14.13/byte-buddy-1.14.13.jar:/Users/mateonoel/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/Users/mateonoel/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/Users/mateonoel/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/Users/mateonoel/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/Users/mateonoel/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/mateonoel/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/mateonoel/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/Users/mateonoel/.m2/repository/org/springframework/data/spring-data-jpa/3.2.5/spring-data-jpa-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/data/spring-data-commons/3.2.5/spring-data-commons-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-orm/6.1.6/spring-orm-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-context/6.1.6/spring-context-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-tx/6.1.6/spring-tx-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-beans/6.1.6/spring-beans-6.1.6.jar:/Users/mateonoel/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/mateonoel/.m2/repository/org/slf4j/slf4j-api/2.0.13/slf4j-api-2.0.13.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-aspects/6.1.6/spring-aspects-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.5/spring-boot-starter-web-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.5/spring-boot-starter-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot/3.2.5/spring-boot-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.5/spring-boot-autoconfigure-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.5/spring-boot-starter-logging-3.2.5.jar:/Users/mateonoel/.m2/repository/ch/qos/logback/logback-classic/1.4.14/logback-classic-1.4.14.jar:/Users/mateonoel/.m2/repository/ch/qos/logback/logback-core/1.4.14/logback-core-1.4.14.jar:/Users/mateonoel/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/mateonoel/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/mateonoel/.m2/repository/org/slf4j/jul-to-slf4j/2.0.13/jul-to-slf4j-2.0.13.jar:/Users/mateonoel/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.5/spring-boot-starter-json-3.2.5.jar:/Users/mateonoel/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.4/jackson-datatype-jdk8-2.15.4.jar:/Users/mateonoel/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.4/jackson-datatype-jsr310-2.15.4.jar:/Users/mateonoel/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.4/jackson-module-parameter-names-2.15.4.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.5/spring-boot-starter-tomcat-3.2.5.jar:/Users/mateonoel/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.20/tomcat-embed-core-10.1.20.jar:/Users/mateonoel/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.20/tomcat-embed-el-10.1.20.jar:/Users/mateonoel/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.20/tomcat-embed-websocket-10.1.20.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-web/6.1.6/spring-web-6.1.6.jar:/Users/mateonoel/.m2/repository/io/micrometer/micrometer-observation/1.12.5/micrometer-observation-1.12.5.jar:/Users/mateonoel/.m2/repository/io/micrometer/micrometer-commons/1.12.5/micrometer-commons-1.12.5.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-webmvc/6.1.6/spring-webmvc-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-expression/6.1.6/spring-expression-6.1.6.jar:/Users/mateonoel/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/mateonoel/.m2/repository/org/postgresql/postgresql/42.6.2/postgresql-42.6.2.jar:/Users/mateonoel/.m2/repository/org/checkerframework/checker-qual/3.31.0/checker-qual-3.31.0.jar:/Users/mateonoel/.m2/repository/org/projectlombok/lombok/1.18.32/lombok-1.18.32.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.5/spring-boot-starter-test-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-test/3.2.5/spring-boot-test-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.5/spring-boot-test-autoconfigure-3.2.5.jar:/Users/mateonoel/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/Users/mateonoel/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/Users/mateonoel/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/Users/mateonoel/.m2/repository/net/minidev/json-smart/2.5.1/json-smart-2.5.1.jar:/Users/mateonoel/.m2/repository/net/minidev/accessors-smart/2.5.1/accessors-smart-2.5.1.jar:/Users/mateonoel/.m2/repository/org/ow2/asm/asm/9.6/asm-9.6.jar:/Users/mateonoel/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/mateonoel/.m2/repository/org/awaitility/awaitility/4.2.1/awaitility-4.2.1.jar:/Users/mateonoel/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/mateonoel/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.2/junit-jupiter-5.10.2.jar:/Users/mateonoel/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.2/junit-jupiter-api-5.10.2.jar:/Users/mateonoel/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/mateonoel/.m2/repository/org/junit/platform/junit-platform-commons/1.10.2/junit-platform-commons-1.10.2.jar:/Users/mateonoel/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/mateonoel/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.2/junit-jupiter-params-5.10.2.jar:/Users/mateonoel/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.2/junit-jupiter-engine-5.10.2.jar:/Users/mateonoel/.m2/repository/org/junit/platform/junit-platform-engine/1.10.2/junit-platform-engine-1.10.2.jar:/Users/mateonoel/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/mateonoel/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.13/byte-buddy-agent-1.14.13.jar:/Users/mateonoel/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/mateonoel/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/mateonoel/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/mateonoel/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-core/6.1.6/spring-core-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-jcl/6.1.6/spring-jcl-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-test/6.1.6/spring-test-6.1.6.jar:/Users/mateonoel/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.5/spring-boot-starter-security-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-aop/6.1.6/spring-aop-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/security/spring-security-config/6.2.4/spring-security-config-6.2.4.jar:/Users/mateonoel/.m2/repository/org/springframework/security/spring-security-web/6.2.4/spring-security-web-6.2.4.jar:/Users/mateonoel/.m2/repository/org/springframework/security/spring-security-test/6.2.4/spring-security-test-6.2.4.jar:/Users/mateonoel/.m2/repository/org/springframework/security/spring-security-core/6.2.4/spring-security-core-6.2.4.jar:/Users/mateonoel/.m2/repository/org/springframework/security/spring-security-crypto/6.2.4/spring-security-crypto-6.2.4.jar:/Users/mateonoel/.m2/repository/com/auth0/java-jwt/4.4.0/java-jwt-4.4.0.jar:/Users/mateonoel/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.4/jackson-databind-2.15.4.jar:/Users/mateonoel/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.4/jackson-annotations-2.15.4.jar:/Users/mateonoel/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.4/jackson-core-2.15.4.jar:/Users/mateonoel/.m2/repository/org/testcontainers/junit-jupiter/1.19.7/junit-jupiter-1.19.7.jar:/Users/mateonoel/.m2/repository/org/testcontainers/testcontainers/1.19.7/testcontainers-1.19.7.jar:/Users/mateonoel/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/mateonoel/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:/Users/mateonoel/.m2/repository/org/apache/commons/commons-compress/1.24.0/commons-compress-1.24.0.jar:/Users/mateonoel/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/Users/mateonoel/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/Users/mateonoel/.m2/repository/com/github/docker-java/docker-java-api/3.3.6/docker-java-api-3.3.6.jar:/Users/mateonoel/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.3.6/docker-java-transport-zerodep-3.3.6.jar:/Users/mateonoel/.m2/repository/com/github/docker-java/docker-java-transport/3.3.6/docker-java-transport-3.3.6.jar:/Users/mateonoel/.m2/repository/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar:/Users/mateonoel/.m2/repository/org/testcontainers/postgresql/1.19.7/postgresql-1.19.7.jar:/Users/mateonoel/.m2/repository/org/testcontainers/jdbc/1.19.7/jdbc-1.19.7.jar:/Users/mateonoel/.m2/repository/org/testcontainers/database-commons/1.19.7/database-commons-1.19.7.jar:/Users/mateonoel/.m2/repository/org/modelmapper/modelmapper/3.2.0/modelmapper-3.2.0.jar:"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="America/Lima"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="22"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="PE"/>
    <property name="sun.boot.library.path" value="/Users/mateonoel/Library/Java/JavaVirtualMachines/openjdk-22.0.1/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/mateonoel/Desktop/pc1-repaso/target/surefire/surefirebooter-20240524113204610_3.jar /Users/mateonoel/Desktop/pc1-repaso/target/surefire 2024-05-24T11-32-04_582-jvmRun1 surefire-20240524113204610_1tmp surefire_0-20240524113204610_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/mateonoel/Desktop/pc1-repaso/target/test-classes:/Users/mateonoel/Desktop/pc1-repaso/target/classes:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.5/spring-boot-starter-data-jpa-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.5/spring-boot-starter-aop-3.2.5.jar:/Users/mateonoel/.m2/repository/org/aspectj/aspectjweaver/1.9.22/aspectjweaver-1.9.22.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.5/spring-boot-starter-jdbc-3.2.5.jar:/Users/mateonoel/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-jdbc/6.1.6/spring-jdbc-6.1.6.jar:/Users/mateonoel/.m2/repository/org/hibernate/orm/hibernate-core/6.4.4.Final/hibernate-core-6.4.4.Final.jar:/Users/mateonoel/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/mateonoel/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/mateonoel/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/mateonoel/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/mateonoel/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/mateonoel/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/mateonoel/.m2/repository/net/bytebuddy/byte-buddy/1.14.13/byte-buddy-1.14.13.jar:/Users/mateonoel/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/Users/mateonoel/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/Users/mateonoel/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/Users/mateonoel/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/Users/mateonoel/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/mateonoel/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/mateonoel/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/Users/mateonoel/.m2/repository/org/springframework/data/spring-data-jpa/3.2.5/spring-data-jpa-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/data/spring-data-commons/3.2.5/spring-data-commons-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-orm/6.1.6/spring-orm-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-context/6.1.6/spring-context-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-tx/6.1.6/spring-tx-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-beans/6.1.6/spring-beans-6.1.6.jar:/Users/mateonoel/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/mateonoel/.m2/repository/org/slf4j/slf4j-api/2.0.13/slf4j-api-2.0.13.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-aspects/6.1.6/spring-aspects-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.5/spring-boot-starter-web-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.5/spring-boot-starter-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot/3.2.5/spring-boot-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.5/spring-boot-autoconfigure-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.5/spring-boot-starter-logging-3.2.5.jar:/Users/mateonoel/.m2/repository/ch/qos/logback/logback-classic/1.4.14/logback-classic-1.4.14.jar:/Users/mateonoel/.m2/repository/ch/qos/logback/logback-core/1.4.14/logback-core-1.4.14.jar:/Users/mateonoel/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/mateonoel/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/mateonoel/.m2/repository/org/slf4j/jul-to-slf4j/2.0.13/jul-to-slf4j-2.0.13.jar:/Users/mateonoel/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.5/spring-boot-starter-json-3.2.5.jar:/Users/mateonoel/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.4/jackson-datatype-jdk8-2.15.4.jar:/Users/mateonoel/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.4/jackson-datatype-jsr310-2.15.4.jar:/Users/mateonoel/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.4/jackson-module-parameter-names-2.15.4.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.5/spring-boot-starter-tomcat-3.2.5.jar:/Users/mateonoel/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.20/tomcat-embed-core-10.1.20.jar:/Users/mateonoel/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.20/tomcat-embed-el-10.1.20.jar:/Users/mateonoel/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.20/tomcat-embed-websocket-10.1.20.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-web/6.1.6/spring-web-6.1.6.jar:/Users/mateonoel/.m2/repository/io/micrometer/micrometer-observation/1.12.5/micrometer-observation-1.12.5.jar:/Users/mateonoel/.m2/repository/io/micrometer/micrometer-commons/1.12.5/micrometer-commons-1.12.5.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-webmvc/6.1.6/spring-webmvc-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-expression/6.1.6/spring-expression-6.1.6.jar:/Users/mateonoel/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/mateonoel/.m2/repository/org/postgresql/postgresql/42.6.2/postgresql-42.6.2.jar:/Users/mateonoel/.m2/repository/org/checkerframework/checker-qual/3.31.0/checker-qual-3.31.0.jar:/Users/mateonoel/.m2/repository/org/projectlombok/lombok/1.18.32/lombok-1.18.32.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.5/spring-boot-starter-test-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-test/3.2.5/spring-boot-test-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.5/spring-boot-test-autoconfigure-3.2.5.jar:/Users/mateonoel/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/Users/mateonoel/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/Users/mateonoel/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/Users/mateonoel/.m2/repository/net/minidev/json-smart/2.5.1/json-smart-2.5.1.jar:/Users/mateonoel/.m2/repository/net/minidev/accessors-smart/2.5.1/accessors-smart-2.5.1.jar:/Users/mateonoel/.m2/repository/org/ow2/asm/asm/9.6/asm-9.6.jar:/Users/mateonoel/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/mateonoel/.m2/repository/org/awaitility/awaitility/4.2.1/awaitility-4.2.1.jar:/Users/mateonoel/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/mateonoel/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.2/junit-jupiter-5.10.2.jar:/Users/mateonoel/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.2/junit-jupiter-api-5.10.2.jar:/Users/mateonoel/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/mateonoel/.m2/repository/org/junit/platform/junit-platform-commons/1.10.2/junit-platform-commons-1.10.2.jar:/Users/mateonoel/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/mateonoel/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.2/junit-jupiter-params-5.10.2.jar:/Users/mateonoel/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.2/junit-jupiter-engine-5.10.2.jar:/Users/mateonoel/.m2/repository/org/junit/platform/junit-platform-engine/1.10.2/junit-platform-engine-1.10.2.jar:/Users/mateonoel/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/mateonoel/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.13/byte-buddy-agent-1.14.13.jar:/Users/mateonoel/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/mateonoel/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/mateonoel/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/mateonoel/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-core/6.1.6/spring-core-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-jcl/6.1.6/spring-jcl-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-test/6.1.6/spring-test-6.1.6.jar:/Users/mateonoel/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/mateonoel/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.5/spring-boot-starter-security-3.2.5.jar:/Users/mateonoel/.m2/repository/org/springframework/spring-aop/6.1.6/spring-aop-6.1.6.jar:/Users/mateonoel/.m2/repository/org/springframework/security/spring-security-config/6.2.4/spring-security-config-6.2.4.jar:/Users/mateonoel/.m2/repository/org/springframework/security/spring-security-web/6.2.4/spring-security-web-6.2.4.jar:/Users/mateonoel/.m2/repository/org/springframework/security/spring-security-test/6.2.4/spring-security-test-6.2.4.jar:/Users/mateonoel/.m2/repository/org/springframework/security/spring-security-core/6.2.4/spring-security-core-6.2.4.jar:/Users/mateonoel/.m2/repository/org/springframework/security/spring-security-crypto/6.2.4/spring-security-crypto-6.2.4.jar:/Users/mateonoel/.m2/repository/com/auth0/java-jwt/4.4.0/java-jwt-4.4.0.jar:/Users/mateonoel/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.4/jackson-databind-2.15.4.jar:/Users/mateonoel/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.4/jackson-annotations-2.15.4.jar:/Users/mateonoel/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.4/jackson-core-2.15.4.jar:/Users/mateonoel/.m2/repository/org/testcontainers/junit-jupiter/1.19.7/junit-jupiter-1.19.7.jar:/Users/mateonoel/.m2/repository/org/testcontainers/testcontainers/1.19.7/testcontainers-1.19.7.jar:/Users/mateonoel/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/mateonoel/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:/Users/mateonoel/.m2/repository/org/apache/commons/commons-compress/1.24.0/commons-compress-1.24.0.jar:/Users/mateonoel/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/Users/mateonoel/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/Users/mateonoel/.m2/repository/com/github/docker-java/docker-java-api/3.3.6/docker-java-api-3.3.6.jar:/Users/mateonoel/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.3.6/docker-java-transport-zerodep-3.3.6.jar:/Users/mateonoel/.m2/repository/com/github/docker-java/docker-java-transport/3.3.6/docker-java-transport-3.3.6.jar:/Users/mateonoel/.m2/repository/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar:/Users/mateonoel/.m2/repository/org/testcontainers/postgresql/1.19.7/postgresql-1.19.7.jar:/Users/mateonoel/.m2/repository/org/testcontainers/jdbc/1.19.7/jdbc-1.19.7.jar:/Users/mateonoel/.m2/repository/org/testcontainers/database-commons/1.19.7/database-commons-1.19.7.jar:/Users/mateonoel/.m2/repository/org/modelmapper/modelmapper/3.2.0/modelmapper-3.2.0.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/mateonoel"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2024-04-16"/>
    <property name="java.home" value="/Users/mateonoel/Library/Java/JavaVirtualMachines/openjdk-22.0.1/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/mateonoel/Desktop/pc1-repaso"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="apple.awt.application.name" value="ForkedBooter"/>
    <property name="surefire.real.class.path" value="/Users/mateonoel/Desktop/pc1-repaso/target/surefire/surefirebooter-20240524113204610_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="22.0.1+8-16"/>
    <property name="user.name" value="mateonoel"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="14.4.1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="localRepository" value="/Users/mateonoel/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="/var/folders/k2/n_kxqnnd0vz7prgkt0n5qk_m0000gn/T/"/>
    <property name="idea.version" value="2024.1.1"/>
    <property name="com.zaxxer.hikari.pool_number" value="2"/>
    <property name="java.version" value="22.0.1"/>
    <property name="user.dir" value="/Users/mateonoel/Desktop/pc1-repaso"/>
    <property name="os.arch" value="aarch64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="6451"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/mateonoel/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="22.0.1+8-16"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="66.0"/>
  </properties>
  <testcase name="InscribirAlumno" classname="org.demo.pc1_demo.course.application.CourseControllerTest" time="0.293">
    <system-out><![CDATA[&amp#27;[2m2024-05-24T11:32:06.779-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mt.c.s.AnnotationConfigContextLoaderUtils&amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Could not detect default configuration classes for test class [org.demo.pc1_demo.course.application.CourseControllerTest]: CourseControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
&amp#27;[2m2024-05-24T11:32:06.786-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36m.b.t.c.SpringBootTestContextBootstrapper&amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Found @SpringBootConfiguration org.demo.pc1_demo.Pc1DemoApplication for test class org.demo.pc1_demo.course.application.CourseControllerTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
&amp#27;[32m :: Spring Boot :: &amp#27;[39m              &amp#27;[2m (v3.2.5)&amp#27;[0;39m

&amp#27;[2m2024-05-24T11:32:06.798-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.d.p.c.a.CourseControllerTest          &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Starting CourseControllerTest using Java 22.0.1 with PID 6451 (started by mateonoel in /Users/mateonoel/Desktop/pc1-repaso)
&amp#27;[2m2024-05-24T11:32:06.798-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.d.p.c.a.CourseControllerTest          &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m The following 1 profile is active: "test"
&amp#27;[2m2024-05-24T11:32:06.852-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36m.s.d.r.c.RepositoryConfigurationDelegate&amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Bootstrapping Spring Data JPA repositories in DEFAULT mode.
&amp#27;[2m2024-05-24T11:32:06.856-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36m.s.d.r.c.RepositoryConfigurationDelegate&amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Finished Spring Data repository scanning in 4 ms. Found 4 JPA repository interfaces.
&amp#27;[2m2024-05-24T11:32:06.896-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.hibernate.jpa.internal.util.LogHelper &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HHH000204: Processing PersistenceUnitInfo [name: default]
&amp#27;[2m2024-05-24T11:32:06.896-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.h.c.internal.RegionFactoryInitiator   &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HHH000026: Second-level cache disabled
&amp#27;[2m2024-05-24T11:32:06.898-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.s.o.j.p.SpringPersistenceUnitInfo     &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m No LoadTimeWeaver setup: ignoring JPA class transformer
&amp#27;[2m2024-05-24T11:32:06.898-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mcom.zaxxer.hikari.HikariDataSource      &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HikariPool-2 - Starting...
&amp#27;[2m2024-05-24T11:32:06.899-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mcom.zaxxer.hikari.pool.HikariPool       &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HikariPool-2 - Added connection conn10: url=jdbc:h2:mem:243a3dcd-0a7f-4f7b-8dac-9bb2e0e84b10 user=SA
&amp#27;[2m2024-05-24T11:32:06.899-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mcom.zaxxer.hikari.HikariDataSource      &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HikariPool-2 - Start completed.
&amp#27;[2m2024-05-24T11:32:06.933-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.h.e.t.j.p.i.JtaPlatformInitiator      &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: drop table if exists course cascade 
Hibernate: drop table if exists student cascade 
Hibernate: drop table if exists student_courses cascade 
Hibernate: drop table if exists teacher cascade 
Hibernate: drop table if exists users cascade 
Hibernate: drop sequence if exists course_seq
Hibernate: drop sequence if exists users_seq
Hibernate: create sequence course_seq start with 1 increment by 50
Hibernate: create sequence users_seq start with 1 increment by 50
Hibernate: create table course (remaining_spots integer, id bigint not null, teacher_id bigint, title varchar(255), primary key (id))
Hibernate: create table student (id bigint not null, primary key (id))
Hibernate: create table student_courses (courses_id bigint not null, students_id bigint not null)
Hibernate: create table teacher (id bigint not null, primary key (id))
Hibernate: create table users (role tinyint not null check (role between 0 and 1), id bigint not null, email varchar(255) not null, name varchar(255) not null, password varchar(255) not null, primary key (id))
Hibernate: alter table if exists course add constraint FKsybhlxoejr4j3teomm5u2bx1n foreign key (teacher_id) references teacher
Hibernate: alter table if exists student add constraint FK3w7xmt19i6a0cr7kp8c80ek40 foreign key (id) references users
Hibernate: alter table if exists student_courses add constraint FKlwviiijdg10oc2ui4yl7adh1o foreign key (courses_id) references course
Hibernate: alter table if exists student_courses add constraint FKrgo64lg01pxfwq2x9753jgywc foreign key (students_id) references student
Hibernate: alter table if exists teacher add constraint FKspqy2s83gvl6g8nt5aubls90k foreign key (id) references users
&amp#27;[2m2024-05-24T11:32:06.938-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mj.LocalContainerEntityManagerFactoryBean&amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Initialized JPA EntityManagerFactory for persistence unit 'default'
&amp#27;[2m2024-05-24T11:32:06.981-05:00&amp#27;[0;39m &amp#27;[33m WARN&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mJpaBaseConfiguration$JpaWebConfiguration&amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
&amp#27;[2m2024-05-24T11:32:07.029-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.s.s.web.DefaultSecurityFilterChain    &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@55c75b72, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@567412db, org.springframework.security.web.context.SecurityContextHolderFilter@38159192, org.springframework.security.web.header.HeaderWriterFilter@7b6d88d1, org.springframework.web.filter.CorsFilter@4addfb95, org.springframework.security.web.authentication.logout.LogoutFilter@582b6362, org.demo.pc1_demo.config.JwtAuthenticationFilter@6a06b374, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@363d3958, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2181144e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2d3bb293, org.springframework.security.web.session.SessionManagementFilter@14cf30b3, org.springframework.security.web.access.ExceptionTranslationFilter@4a2891d1, org.springframework.security.web.access.intercept.AuthorizationFilter@2e89310c]
&amp#27;[2m2024-05-24T11:32:07.080-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.s.b.t.m.w.SpringBootMockServletContext&amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Initializing Spring TestDispatcherServlet ''
&amp#27;[2m2024-05-24T11:32:07.080-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.s.t.web.servlet.TestDispatcherServlet &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Initializing Servlet ''
&amp#27;[2m2024-05-24T11:32:07.081-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.s.t.web.servlet.TestDispatcherServlet &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Completed initialization in 0 ms
&amp#27;[2m2024-05-24T11:32:07.084-05:00&amp#27;[0;39m &amp#27;[32m INFO&amp#27;[0;39m &amp#27;[35m6451&amp#27;[0;39m &amp#27;[2m---&amp#27;[0;39m &amp#27;[2m[           main]&amp#27;[0;39m &amp#27;[2m&amp#27;[0;39m&amp#27;[36mo.d.p.c.a.CourseControllerTest          &amp#27;[0;39m &amp#27;[2m:&amp#27;[0;39m Started CourseControllerTest in 0.297 seconds (process running for 2.438)
Hibernate: select t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role from teacher t1_0 join users t1_1 on t1_0.id=t1_1.id
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select next value for users_seq
Hibernate: insert into users (email,name,password,role,id) values (?,?,?,?,?)
Hibernate: insert into student (id) values (?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select next value for users_seq
Hibernate: insert into users (email,name,password,role,id) values (?,?,?,?,?)
Hibernate: insert into teacher (id) values (?)
Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqaG9uQGdtYWlsLmNvbSIsInJvbGUiOiJST0xFX1RFQUNIRVIiLCJpYXQiOjE3MTY1NjgzMjcsImV4cCI6MTcxNjYwNDMyN30.9R2oA8sTn5nxBaKoB_sCr4oFKVWVUMY9Rf97Skol238
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select next value for course_seq
Hibernate: insert into course (remaining_spots,teacher_id,title,id) values (?,?,?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select next value for course_seq
Hibernate: insert into course (remaining_spots,teacher_id,title,id) values (?,?,?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select c1_0.id,c1_0.remaining_spots,t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role,c1_0.title from course c1_0 left join (teacher t1_0 join users t1_1 on t1_0.id=t1_1.id) on t1_0.id=c1_0.teacher_id where c1_0.id=?
Hibernate: select s1_0.id,s1_1.email,s1_1.name,s1_1.password,s1_1.role from student s1_0 join users s1_1 on s1_0.id=s1_1.id where s1_0.id=?
Hibernate: select c1_0.students_id,c1_1.id,c1_1.remaining_spots,t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role,c1_1.title from student_courses c1_0 join course c1_1 on c1_1.id=c1_0.courses_id left join (teacher t1_0 join users t1_1 on t1_0.id=t1_1.id) on t1_0.id=c1_1.teacher_id where c1_0.students_id=?
Hibernate: update course set remaining_spots=?,teacher_id=?,title=? where id=?
Hibernate: insert into student_courses (students_id,courses_id) values (?,?)
]]></system-out>
  </testcase>
  <testcase name="ListarAlumnosInscritos" classname="org.demo.pc1_demo.course.application.CourseControllerTest" time="0.098">
    <system-out><![CDATA[Hibernate: select t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role from teacher t1_0 join users t1_1 on t1_0.id=t1_1.id
Hibernate: delete from teacher where id=?
Hibernate: delete from users where id=?
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into users (email,name,password,role,id) values (?,?,?,?,?)
Hibernate: insert into teacher (id) values (?)
Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqaG9uQGdtYWlsLmNvbSIsInJvbGUiOiJST0xFX1RFQUNIRVIiLCJpYXQiOjE3MTY1NjgzMjcsImV4cCI6MTcxNjYwNDMyN30.9R2oA8sTn5nxBaKoB_sCr4oFKVWVUMY9Rf97Skol238
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into course (remaining_spots,teacher_id,title,id) values (?,?,?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into course (remaining_spots,teacher_id,title,id) values (?,?,?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select c1_0.id,c1_0.remaining_spots,t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role,c1_0.title from course c1_0 left join (teacher t1_0 join users t1_1 on t1_0.id=t1_1.id) on t1_0.id=c1_0.teacher_id where c1_0.id=?
Hibernate: select s1_0.id,s1_1.email,s1_1.name,s1_1.password,s1_1.role from student s1_0 join users s1_1 on s1_0.id=s1_1.id where s1_0.id=?
Hibernate: select c1_0.students_id,c1_1.id,c1_1.remaining_spots,t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role,c1_1.title from student_courses c1_0 join course c1_1 on c1_1.id=c1_0.courses_id left join (teacher t1_0 join users t1_1 on t1_0.id=t1_1.id) on t1_0.id=c1_1.teacher_id where c1_0.students_id=?
Hibernate: update course set remaining_spots=?,teacher_id=?,title=? where id=?
Hibernate: delete from student_courses where students_id=?
Hibernate: insert into student_courses (students_id,courses_id) values (?,?)
Hibernate: insert into student_courses (students_id,courses_id) values (?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select c1_0.id,c1_0.remaining_spots,t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role,c1_0.title from course c1_0 left join (teacher t1_0 join users t1_1 on t1_0.id=t1_1.id) on t1_0.id=c1_0.teacher_id where c1_0.id=?
Hibernate: select s1_0.courses_id,s1_1.id,s1_2.email,s1_2.name,s1_2.password,s1_2.role from student_courses s1_0 join (student s1_1 join users s1_2 on s1_1.id=s1_2.id) on s1_1.id=s1_0.students_id where s1_0.courses_id=?
Hibernate: select c1_0.students_id,c1_1.id,c1_1.remaining_spots,t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role,c1_1.title from student_courses c1_0 join course c1_1 on c1_1.id=c1_0.courses_id left join (teacher t1_0 join users t1_1 on t1_0.id=t1_1.id) on t1_0.id=c1_1.teacher_id where c1_0.students_id=?
[{"id":1,"role":"STUDENT","name":"Jane","email":"jane@gmail.com","password":"$2a$10$MYzTPuueXqvfS2FJZb7zzenscovbn9Lcb4Oa3BojCTx0nfWD1A51G","rolePrefix":"ROLE_","courses":[{"id":1,"title":"Math","remainingSpots":8,"students":[1,1],"teacher":null},1],"enabled":true,"authorities":[{"authority":"ROLE_STUDENT"}],"username":"jane@gmail.com","accountNonExpired":true,"accountNonLocked":true,"credentialsNonExpired":true},1]
]]></system-out>
  </testcase>
  <testcase name="CrearCurso" classname="org.demo.pc1_demo.course.application.CourseControllerTest" time="0.079">
    <system-out><![CDATA[Hibernate: select t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role from teacher t1_0 join users t1_1 on t1_0.id=t1_1.id
Hibernate: delete from teacher where id=?
Hibernate: delete from users where id=?
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into users (email,name,password,role,id) values (?,?,?,?,?)
Hibernate: insert into teacher (id) values (?)
Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqaG9uQGdtYWlsLmNvbSIsInJvbGUiOiJST0xFX1RFQUNIRVIiLCJpYXQiOjE3MTY1NjgzMjcsImV4cCI6MTcxNjYwNDMyN30.9R2oA8sTn5nxBaKoB_sCr4oFKVWVUMY9Rf97Skol238
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into course (remaining_spots,teacher_id,title,id) values (?,?,?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into course (remaining_spots,teacher_id,title,id) values (?,?,?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into course (remaining_spots,teacher_id,title,id) values (?,?,?,?)
]]></system-out>
  </testcase>
  <testcase name="EliminarCurso" classname="org.demo.pc1_demo.course.application.CourseControllerTest" time="0.079">
    <system-out><![CDATA[Hibernate: select t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role from teacher t1_0 join users t1_1 on t1_0.id=t1_1.id
Hibernate: delete from teacher where id=?
Hibernate: delete from users where id=?
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into users (email,name,password,role,id) values (?,?,?,?,?)
Hibernate: insert into teacher (id) values (?)
Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqaG9uQGdtYWlsLmNvbSIsInJvbGUiOiJST0xFX1RFQUNIRVIiLCJpYXQiOjE3MTY1NjgzMjcsImV4cCI6MTcxNjYwNDMyN30.9R2oA8sTn5nxBaKoB_sCr4oFKVWVUMY9Rf97Skol238
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into course (remaining_spots,teacher_id,title,id) values (?,?,?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into course (remaining_spots,teacher_id,title,id) values (?,?,?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select c1_0.id,c1_0.remaining_spots,t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role,c1_0.title from course c1_0 left join (teacher t1_0 join users t1_1 on t1_0.id=t1_1.id) on t1_0.id=c1_0.teacher_id where c1_0.id=?
Hibernate: delete from course where id=?
]]></system-out>
  </testcase>
  <testcase name="ListarCursosConVacantes" classname="org.demo.pc1_demo.course.application.CourseControllerTest" time="0.083">
    <system-out><![CDATA[Hibernate: select t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role from teacher t1_0 join users t1_1 on t1_0.id=t1_1.id
Hibernate: delete from teacher where id=?
Hibernate: delete from users where id=?
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into users (email,name,password,role,id) values (?,?,?,?,?)
Hibernate: insert into teacher (id) values (?)
Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqaG9uQGdtYWlsLmNvbSIsInJvbGUiOiJST0xFX1RFQUNIRVIiLCJpYXQiOjE3MTY1NjgzMjcsImV4cCI6MTcxNjYwNDMyN30.9R2oA8sTn5nxBaKoB_sCr4oFKVWVUMY9Rf97Skol238
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into course (remaining_spots,teacher_id,title,id) values (?,?,?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into course (remaining_spots,teacher_id,title,id) values (?,?,?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select c1_0.id,c1_0.remaining_spots,c1_0.teacher_id,c1_0.title from course c1_0 where c1_0.remaining_spots>?
Hibernate: select s1_0.courses_id,s1_1.id,s1_2.email,s1_2.name,s1_2.password,s1_2.role from student_courses s1_0 join (student s1_1 join users s1_2 on s1_1.id=s1_2.id) on s1_1.id=s1_0.students_id where s1_0.courses_id=?
Hibernate: select c1_0.students_id,c1_1.id,c1_1.remaining_spots,t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role,c1_1.title from student_courses c1_0 join course c1_1 on c1_1.id=c1_0.courses_id left join (teacher t1_0 join users t1_1 on t1_0.id=t1_1.id) on t1_0.id=c1_1.teacher_id where c1_0.students_id=?
Hibernate: select s1_0.courses_id,s1_1.id,s1_2.email,s1_2.name,s1_2.password,s1_2.role from student_courses s1_0 join (student s1_1 join users s1_2 on s1_1.id=s1_2.id) on s1_1.id=s1_0.students_id where s1_0.courses_id=?
Hibernate: select s1_0.courses_id,s1_1.id,s1_2.email,s1_2.name,s1_2.password,s1_2.role from student_courses s1_0 join (student s1_1 join users s1_2 on s1_1.id=s1_2.id) on s1_1.id=s1_0.students_id where s1_0.courses_id=?
Hibernate: select s1_0.courses_id,s1_1.id,s1_2.email,s1_2.name,s1_2.password,s1_2.role from student_courses s1_0 join (student s1_1 join users s1_2 on s1_1.id=s1_2.id) on s1_1.id=s1_0.students_id where s1_0.courses_id=?
Hibernate: select s1_0.courses_id,s1_1.id,s1_2.email,s1_2.name,s1_2.password,s1_2.role from student_courses s1_0 join (student s1_1 join users s1_2 on s1_1.id=s1_2.id) on s1_1.id=s1_0.students_id where s1_0.courses_id=?
Hibernate: select s1_0.courses_id,s1_1.id,s1_2.email,s1_2.name,s1_2.password,s1_2.role from student_courses s1_0 join (student s1_1 join users s1_2 on s1_1.id=s1_2.id) on s1_1.id=s1_0.students_id where s1_0.courses_id=?
Hibernate: select s1_0.courses_id,s1_1.id,s1_2.email,s1_2.name,s1_2.password,s1_2.role from student_courses s1_0 join (student s1_1 join users s1_2 on s1_1.id=s1_2.id) on s1_1.id=s1_0.students_id where s1_0.courses_id=?
Hibernate: select s1_0.courses_id,s1_1.id,s1_2.email,s1_2.name,s1_2.password,s1_2.role from student_courses s1_0 join (student s1_1 join users s1_2 on s1_1.id=s1_2.id) on s1_1.id=s1_0.students_id where s1_0.courses_id=?
Hibernate: select s1_0.courses_id,s1_1.id,s1_2.email,s1_2.name,s1_2.password,s1_2.role from student_courses s1_0 join (student s1_1 join users s1_2 on s1_1.id=s1_2.id) on s1_1.id=s1_0.students_id where s1_0.courses_id=?
Hibernate: select s1_0.courses_id,s1_1.id,s1_2.email,s1_2.name,s1_2.password,s1_2.role from student_courses s1_0 join (student s1_1 join users s1_2 on s1_1.id=s1_2.id) on s1_1.id=s1_0.students_id where s1_0.courses_id=?
]]></system-out>
  </testcase>
  <testcase name="DesinscribirAlumno" classname="org.demo.pc1_demo.course.application.CourseControllerTest" time="0.079">
    <system-out><![CDATA[Hibernate: select t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role from teacher t1_0 join users t1_1 on t1_0.id=t1_1.id
Hibernate: delete from teacher where id=?
Hibernate: delete from users where id=?
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into users (email,name,password,role,id) values (?,?,?,?,?)
Hibernate: insert into teacher (id) values (?)
Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqaG9uQGdtYWlsLmNvbSIsInJvbGUiOiJST0xFX1RFQUNIRVIiLCJpYXQiOjE3MTY1NjgzMjcsImV4cCI6MTcxNjYwNDMyN30.9R2oA8sTn5nxBaKoB_sCr4oFKVWVUMY9Rf97Skol238
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into course (remaining_spots,teacher_id,title,id) values (?,?,?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into course (remaining_spots,teacher_id,title,id) values (?,?,?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select c1_0.id,c1_0.remaining_spots,t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role,c1_0.title from course c1_0 left join (teacher t1_0 join users t1_1 on t1_0.id=t1_1.id) on t1_0.id=c1_0.teacher_id where c1_0.id=?
Hibernate: select s1_0.id,s1_1.email,s1_1.name,s1_1.password,s1_1.role from student s1_0 join users s1_1 on s1_0.id=s1_1.id where s1_0.id=?
Hibernate: select c1_0.students_id,c1_1.id,c1_1.remaining_spots,t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role,c1_1.title from student_courses c1_0 join course c1_1 on c1_1.id=c1_0.courses_id left join (teacher t1_0 join users t1_1 on t1_0.id=t1_1.id) on t1_0.id=c1_1.teacher_id where c1_0.students_id=?
Hibernate: update course set remaining_spots=?,teacher_id=?,title=? where id=?
Hibernate: delete from student_courses where students_id=?
Hibernate: insert into student_courses (students_id,courses_id) values (?,?)
Hibernate: insert into student_courses (students_id,courses_id) values (?,?)
Hibernate: insert into student_courses (students_id,courses_id) values (?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select c1_0.id,c1_0.remaining_spots,t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role,c1_0.title from course c1_0 left join (teacher t1_0 join users t1_1 on t1_0.id=t1_1.id) on t1_0.id=c1_0.teacher_id where c1_0.id=?
Hibernate: select s1_0.id,s1_1.email,s1_1.name,s1_1.password,s1_1.role from student s1_0 join users s1_1 on s1_0.id=s1_1.id where s1_0.id=?
Hibernate: select s1_0.courses_id,s1_1.id,s1_2.email,s1_2.name,s1_2.password,s1_2.role from student_courses s1_0 join (student s1_1 join users s1_2 on s1_1.id=s1_2.id) on s1_1.id=s1_0.students_id where s1_0.courses_id=?
Hibernate: select c1_0.students_id,c1_1.id,c1_1.remaining_spots,t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role,c1_1.title from student_courses c1_0 join course c1_1 on c1_1.id=c1_0.courses_id left join (teacher t1_0 join users t1_1 on t1_0.id=t1_1.id) on t1_0.id=c1_1.teacher_id where c1_0.students_id=?
Hibernate: update course set remaining_spots=?,teacher_id=?,title=? where id=?
Hibernate: delete from student_courses where students_id=?
Hibernate: insert into student_courses (students_id,courses_id) values (?,?)
Hibernate: insert into student_courses (students_id,courses_id) values (?,?)
]]></system-out>
  </testcase>
  <testcase name="ActualizarCurso" classname="org.demo.pc1_demo.course.application.CourseControllerTest" time="0.078">
    <system-out><![CDATA[Hibernate: select t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role from teacher t1_0 join users t1_1 on t1_0.id=t1_1.id
Hibernate: delete from teacher where id=?
Hibernate: delete from users where id=?
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into users (email,name,password,role,id) values (?,?,?,?,?)
Hibernate: insert into teacher (id) values (?)
Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqaG9uQGdtYWlsLmNvbSIsInJvbGUiOiJST0xFX1RFQUNIRVIiLCJpYXQiOjE3MTY1NjgzMjcsImV4cCI6MTcxNjYwNDMyN30.9R2oA8sTn5nxBaKoB_sCr4oFKVWVUMY9Rf97Skol238
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into course (remaining_spots,teacher_id,title,id) values (?,?,?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: insert into course (remaining_spots,teacher_id,title,id) values (?,?,?,?)
Hibernate: select u1_0.id,case when u1_1.id is not null then 1 when u1_2.id is not null then 2 when u1_0.id is not null then 0 end,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_1.id,u1_2.id from users u1_0 left join student u1_1 on u1_0.id=u1_1.id left join teacher u1_2 on u1_0.id=u1_2.id where u1_0.email=?
Hibernate: select c1_0.id,c1_0.remaining_spots,t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role,c1_0.title from course c1_0 left join (teacher t1_0 join users t1_1 on t1_0.id=t1_1.id) on t1_0.id=c1_0.teacher_id where c1_0.id=?
Hibernate: select s1_0.courses_id,s1_1.id,s1_2.email,s1_2.name,s1_2.password,s1_2.role from student_courses s1_0 join (student s1_1 join users s1_2 on s1_1.id=s1_2.id) on s1_1.id=s1_0.students_id where s1_0.courses_id=?
Hibernate: select c1_0.students_id,c1_1.id,c1_1.remaining_spots,t1_0.id,t1_1.email,t1_1.name,t1_1.password,t1_1.role,c1_1.title from student_courses c1_0 join course c1_1 on c1_1.id=c1_0.courses_id left join (teacher t1_0 join users t1_1 on t1_0.id=t1_1.id) on t1_0.id=c1_1.teacher_id where c1_0.students_id=?
]]></system-out>
  </testcase>
</testsuite>